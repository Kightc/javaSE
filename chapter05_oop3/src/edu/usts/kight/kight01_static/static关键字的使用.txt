
static关键字的使用

1. static: 静态的


2.static用来修饰的结构：属性、方法、代码块、内部类



3.static修饰属性
    3.1 变量的分类
        方式1：按照数据类型
            基本数据类型
            引用数据类型

        方式2：按照类中声明的位置
            成员变量：按照是否使用static修饰进行分类
                使用static修饰的成员变量：静态变量、类变量

                不使用static修饰的成员变量：非静态变量、实例变量

            局部变量(方法内、方法形参、构造器内、构造器形参、代码块内等)

    3.2 静态变量：类中属性使用static进行修饰
        对比静态变量和实例变量
            ① 个数
                静态变量：
                    在内存空间中只有一个，被类的多个对象所共享
                实例变量：
                    类的每一个实例(或对象)都保存着一份实例变量
            ② 内存位置
                静态变量：
                    jdk6及之前存放在：存放在方法区中。
                    jdk7及之后存放在：堆空间中
                实例变量：存放在堆空间中的对象实体中
            ③ 加载时机
                静态变量：
                    随着类的加载而加载，由于类只会加载一次，所以静态变量也只有一份
                实例变量
                    随着对象的创建而加载。每个对象拥有一份实例变量
            ④ 调用者
                静态变量
                    可以被类直接调用，也可以使用对象调用
                实例变量
                    只能使用对象调用
            ⑤ 判断是否可以调用 ------从生命周期角度解释
                静态变量随着类的加载而加载，而成员变量随着对象的创建而加载，对象的创建在类的加载之后
                因此在类加载时，对象可能还没有被创建，故不能通过类直接调用成员成员变量。
                而在对象创建了之后，静态变量肯定是在其之前被加载了，因此我们可以通过对象来调用静态变量

                            类变量         实例变量
                类           yes             no
                对象          yes             yes

            ⑥ 消亡时机
                静态变量：
                    随着类的卸载而消亡
                实例变量：随着对象的消亡而消亡
4. static修饰方法(类方法、静态方法)
    随着类的加载而加载
    可以通过“类.静态方法”的方式来直接调用静态方法

    静态方法内可以调用静态的属性或静态方法，不可以调用非静态的结构
        属性和方法的前缀使用的是当前类，可以省略
               类方法         非静态方法
    类           yes             no
    对象         yes             yes
    static修饰的方法内不能用this以及super

    补充：在类的非静态方法中可以调用当前类的非静态结构或静态结构(属性、方法)
5.开发中，什么时候需要将属性声明为静态的
    判断当前类的多个对象是否能共享此成员变量，且此成员变量的值是相同的
    开发中，我们常将一些常量设置为静态

    什么时候将方法声明为静态的
        方法内操作的变量都是静态变量(而非实例变量)的话，则此方法建议声明为静态方法
        开发中，我们常常将工具类中的方法声明为静态方法。比如Arrays类、Math类

