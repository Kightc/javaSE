
Object类的概述

    1.Object类的说明
        明确：java.long.Object
        任何一个java类(除了Object类)都直接或间接的继承于Object类
        Object类称为java类的跟父类
        Object类中声明的结构(属性、方法)就具有通用性
            Object类中没有声明属性
            Object提供了一个空参构造器
            重点关注：Object中声明的的方法


    2.常用方法
      重点方法：equals() \ toString()
      了解方法：clone() \ finalize()
      目前不需要关注(后续细说)：getClass() \ hashCode() \ notify() \ notifyAll() \ wait() \ wait(xxx)
                            wait(xx, yy)

    3.equals()的使用
        3.1适用性
            任何引用数据类型都可以使用(包括数组)

        3.2 java.long.Object类中的equals()的定义
            public boolean equals(Object obj) {
                return (this == obj);
            }

        3.3子类使用说明
            自定义的类在没有重写Object中的equals()方法的情况下，调用了就是Object中声明的equals()，比较
            两个对象引用的地址是否相同(比较两个对象是否指向了堆空间中的同一个对象实体)

            对于像String、File、Date和包装类等，他们都重写了Object类中的equals()方法，用于比较两个对象
            的实体内容是否相等

        3.4开发中使用说明
            在实际开发中，针对于自定义的类，常常会两个对象是否equals()，而此时主要是判断两个对象的属性值是否
            相等，所以我们要重写Object类中的equals()方法。

            如何重写：
                *手动自己实现

                *调用IDEA自动实现(推荐)

        3.5高频面试题：区分 == 和 equals()
            ==：运算符
                ① 使用范围：基本数据类型、引用数据类型
                ② 基本数据类型：判断数据的值是否相等
                    char c1 = 'A';
                    int c2 = 65;
                    sout(c1 == c2); // true
                ③ 引用数据类型：比较两个引用变量的地址值是否相等(或比较两个引用是否指向同一个对象实体)

            equals()：方法
                使用范围：只能使用在引用数据类型上
                具体使用：对于类来说，重写equals()和不重写equals()的区别


    4.toString()的使用
        4.1Object类中的toString()的定义
            public String toString() {
                return getClass().getName() + "@" + Integer.toHexString(hashCode());
            }

        4.2开发中使用的场景
            平时我们在调用System.out.println()打印对象引用变量时，其是就调用了对象的toString()

        4.3 子类使用说明
            ① 自定义的类
                在没有重写Object类的toString()的情况下默认返回的是当前对象的地址
            ② 像String、File、Date或包装类等Object的子类都重写了Object类的toString()，在调用时
               返回当前对象的实体内容

        4.4 开发中使用说明：
            习惯上，开发中对于自定义的类在调用toString()时，也希望显示对象的实体内容，而非地址值。
            这时候就需要重写Object类中的toString()
